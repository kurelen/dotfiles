#+TITLE: Emacs Configuration
#+AUTHOR: Alexander Jandt
#+EMAIL: kurelen@googlemail.com
#+OPTIONS: toc:nil num:nil

Based and inspired by [[https://github.com/hrs/dotfiles][Harry R. Schwartzes Dotfiles]]

* Configure =use-package=

Use =use-package= to install and configure packages. The =init.el= includes the
initial setup for =package.el= and ensures =use-package= is installed.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

Disable deprecation warnings about =cl=. The =cl= library has been deprecated,
but lots of packages still use it.

#+begin_src emacs-lisp
  (setq byte-compile-warnings '(cl-functions))
#+end_src

Set up =auto-package-update= to let me update packages from the command line
(say, in a =cron= job), with:

=$ emacs --no-window-system --funcall=auto-package-update-now --kill=

#+begin_src emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t))
#+end_src

* Set personal information

** Who am I? Where am I?

#+begin_src emacs-lisp
  (setq user-full-name "Alexander Jandt"
        user-mail-address "kurelen@googlemail.com"
        calendar-latitude 52.47
        calendar-longitude 13.40
        calendar-location-name "Berlin")
#+end_src

* =evil-mode=

Load and configure =evil-mode=.

Don't automatically load Evil bindings in different modes.

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-abbrev-expand-on-insert-exit nil
          evil-want-keybinding nil)

    :config
    (evil-mode 1))
#+end_src

Install =evil-collection=, which provides evil-friendly bindings for many modes.

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list
          '(ag dired magit which-key))
    (evil-collection-init))
#+end_src

Enable =surround= everywhere.

#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+end_src

Use =evil= with Org agendas.

#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

* Backup Files

Use git to version files. 

#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

* Utility functions

Define a big ol' bunch of handy utility functions.

#+begin_src emacs-lisp
  (defun kurelen/rename-file (new-name)
    (interactive "FNew name: ")
    (let ((filename (buffer-file-name)))
      (if filename
          (progn
            (when (buffer-modified-p)
              (save-buffer))
            (rename-file filename new-name t)
            (kill-buffer (current-buffer))
            (find-file new-name)
            (message "Renamed '%s' -> '%s'" filename new-name))
        (message "Buffer '%s' isn't backed by a file!" (buffer-name)))))

  (defun kurelen/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
         name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))

  (defun kurelen/add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))

  (defun kurelen/find-file-as-sudo ()
    (interactive)
    (let ((file-name (buffer-file-name)))
      (when file-name
        (find-alternate-file (concat "/sudo::" file-name)))))

  (defun kurelen/region-or-word ()
    (if mark-active
        (buffer-substring-no-properties (region-beginning)
                                        (region-end))
      (thing-at-point 'word)))

  (defun kurelen/append-to-path (path)
    "Add a path both to the $PATH variable and to Emacs' exec-path."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))

  (defun kurelen/insert-password ()
    (interactive)
    (shell-command "pwgen 30 -1" t))

  (defun kurelen/notify-send (title message)
    "Display a desktop notification by shelling out to `notify-send'."
    (call-process-shell-command
     (format "notify-send -t 2000 \"%s\" \"%s\"" title message)))
#+end_src

* UI preferences
** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
#+end_src

There's a tiny scroll bar that appears in the minibuffer window. This disables
that:

#+begin_src emacs-lisp
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+end_src

The default frame title isn't useful. This binds it to the name of the current
project:

#+begin_src emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+end_src

Show linenumbers and hightlight long lines

#+begin_src emacs-lisp
  ;; (global-linum-mode)
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
  (global-display-fill-column-indicator-mode)
#+end_src

** Load up a theme

Trying out something low saturated, darker

#+begin_src emacs-lisp
  (use-package zenburn-theme)
  (use-package context-coloring)

  (defun kurelen/apply-theme ()
    "Apply my chosen Themes."
    (interactive)

    (setq zenburn-use-variable-pitch t)
    ;; scale headings in org-mode
    (setq zenburn-scale-org-headlines t)
    ;; scale headings in outline-mode
    (setq zenburn-scale-outline-headlines t)
    (load-theme 'zenburn t))
#+end_src

If this code is being evaluated by =emacs --daemon=, ensure that each subsequent
frame is themed appropriately.

#+begin_src emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame (kurelen/apply-theme))))
    (kurelen/apply-theme))
#+end_src

** Use =minions= to hide all minor modes

I never want to see a minor mode, and manually adding =:diminish= to every
use-package declaration is a hassle. This uses =minions= to hide all the minor
modes in the modeline. Nice!

#+begin_src emacs-lisp
  (use-package minions
    :config
    (setq minions-mode-line-lighter "âš™"
          minions-mode-line-delimiters (cons "" ""))
    (minions-mode 1))
#+end_src

** Configure a pretty modeline

#+begin_src emacs-lisp
  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+end_src

** Disable visual bell

=sensible-defaults= replaces the audible bell with a visual one, but I really
don't even want that (and my Emacs/Mac pair renders it poorly). This disables
the bell altogether.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Scroll conservatively

When point goes outside the window, Emacs usually recenters the buffer point.
I'm not crazy about that. This changes scrolling behavior to only scroll as far
as point goes.

#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

** Set default font and configure font resizing

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from
=sensible-defaults=.

#+begin_src emacs-lisp
  (setq kurelen/default-fixed-font "Fira Code")
  (setq kurelen/default-fixed-font-size 180)
  (setq kurelen/current-fixed-font-size kurelen/default-fixed-font-size)
  (set-face-attribute 'default nil
                      :family kurelen/default-fixed-font
                      :height kurelen/current-fixed-font-size)
  (set-face-attribute 'fixed-pitch nil
                      :family kurelen/default-fixed-font
                      :height kurelen/current-fixed-font-size)

  (setq kurelen/default-variable-font "Liberation")
  (setq kurelen/default-variable-font-size 180)
  (setq kurelen/current-variable-font-size kurelen/default-variable-font-size)
  (set-face-attribute 'variable-pitch nil
                      :family kurelen/default-variable-font
                      :height kurelen/current-variable-font-size)

  (setq kurelen/font-change-increment 1.1)

  (defun kurelen/set-font-size ()
    "Change default, fixed-pitch, and variable-pitch font sizes to match respective variables."
    (set-face-attribute 'default nil
                        :height kurelen/current-fixed-font-size)
    (set-face-attribute 'fixed-pitch nil
                        :height kurelen/current-fixed-font-size)
    (set-face-attribute 'variable-pitch nil
                        :height kurelen/current-variable-font-size))

  (defun kurelen/reset-font-size ()
    "Revert font sizes back to defaults."
    (interactive)
    (setq kurelen/current-fixed-font-size kurelen/default-fixed-font-size)
    (setq kurelen/current-variable-font-size kurelen/default-variable-font-size)
    (kurelen/set-font-size))

  (defun kurelen/increase-font-size ()
    "Increase current font sizes by a factor of `kurelen/font-change-increment'."
    (interactive)
    (setq kurelen/current-fixed-font-size
          (ceiling (* kurelen/current-fixed-font-size kurelen/font-change-increment)))
    (setq kurelen/current-variable-font-size
          (ceiling (* kurelen/current-variable-font-size kurelen/font-change-increment)))
    (kurelen/set-font-size))

  (defun kurelen/decrease-font-size ()
    "Decrease current font sizes by a factor of `kurelen/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq kurelen/current-fixed-font-size
          (max 1
               (floor (/ kurelen/current-fixed-font-size kurelen/font-change-increment))))
    (setq kurelen/current-variable-font-size
          (max 1
               (floor (/ kurelen/current-variable-font-size kurelen/font-change-increment))))
    (kurelen/set-font-size))

  (define-key global-map (kbd "C-)") 'kurelen/reset-font-size)
  (define-key global-map (kbd "C-+") 'kurelen/increase-font-size)
  (define-key global-map (kbd "C-=") 'kurelen/increase-font-size)
  (define-key global-map (kbd "C-_") 'kurelen/decrease-font-size)
  (define-key global-map (kbd "C--") 'kurelen/decrease-font-size)

  (kurelen/reset-font-size)
#+end_src

#+RESULTS:

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+begin_src emacs-lisp
  (use-package diff-hl
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+end_src

* Project management

I use a few packages in virtually every programming or writing environment to
manage the project, handle auto-completion, search for terms, and deal with
version control. That's all in here.

** =ag=

Install =ag= to provide search within projects (usually through
=projectile-ag=).

#+begin_src emacs-lisp
  (use-package ag)
#+end_src

** =avy=

Install =avy= to skip around the screen quickly.

#+begin_src emacs-lisp
  (use-package avy
    :bind*
    ("C-;" . evil-avy-goto-char-2))
#+end_src

** =company=

Use =company-mode= everywhere.

#+begin_src emacs-lisp
  (use-package company
    :custom
    (company-idle-delay 0)
    (company-tooltip-align-annotations t)
    :config
    (add-hook 'prog-mode-hook 'company-mode))
#+end_src

[[https://github.com/sebastiencs/company-box][company-box]] adds some semantic icons to the =company= completion menu.

#+begin_src emacs-lisp
	(use-package company-box
		:ensure t
		:after company
		:hook (company-mode . company-box-mode))
#+end_src

** =dumb-jump=

The =dumb-jump= package works well enough in a [[https://github.com/jacktasia/dumb-jump#supported-languages][ton of environments]], and it doesn't
require any additional setup. I've bound its most useful command to =M-.=.

#+begin_src emacs-lisp
  (use-package dumb-jump
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (define-key evil-normal-state-map (kbd "M-.") 'xref-find-definitions))
#+end_src

The =xref-find-definitions= function creates an =XREF= buffer of results if more
than one thing matches. That's inconvenient; I'd rather use Ivy to select among
them.

#+begin_src emacs-lisp
	(use-package ivy-xref
		:init
		(setq xref-show-definitions-function #'ivy-xref-show-defs))
#+end_src

** =flycheck=

I'd like to enable flycheck all kinds of places.

#+begin_src emacs-lisp
  (use-package let-alist)
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src

** =magit=

I use =magit= to handle version control. It's lovely, but I tweak a few things:

- I bring up the status menu with =C-x g=.
- The default behavior of =magit= is to ask before pushing. I haven't had any
  problems with accidentally pushing, so I'd rather not confirm that every time.
- Per [[http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tpope's suggestions]], highlight commit text in the summary line that goes
  beyond 50 characters.
- I'd like to start in the insert state when writing a commit message.

#+begin_src emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . magit-status)

    :config
    (use-package with-editor)

    (setq magit-push-always-verify nil
          git-commit-summary-max-length 50)

    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+end_src

I've been playing around with the newly-released =forge= for managing GitHub PRs
and issues. Seems slick so far.

#+begin_src emacs-lisp
  (use-package ghub)
  (use-package forge)
#+end_src

I'm also partial to =git-timemachine=, which lets you quickly page through the
history of a file.

#+begin_src emacs-lisp
  (use-package git-timemachine)
#+end_src

** =projectile=

Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds it to the
easier-to-type =C-c v= to useful searches.

Bind =C-p= to fuzzy-finding files in the current project. We also need to
explicitly set that in a few other modes.

I use =ivy= as my completion system.

When I visit a project with =projectile-switch-project=, the default action is
to search for a file in that project. I'd rather just open up the top-level
directory of the project in =dired= and find (or create) new files from there.

I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projectile-defined project. I use the current directory as a
project root (if I'm not in a "real" project).

#+begin_src emacs-lisp
  (use-package projectile
    :bind
    ("C-c v" . projectile-ag)

    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

    (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
    (evil-define-key 'motion ag-mode-map (kbd "C-p") 'projectile-find-file)
    (evil-define-key 'motion rspec-mode-map (kbd "C-p") 'projectile-find-file)
    (evil-define-key 'motion rspec-compilation-mode-map (kbd "C-p") 'projectile-find-file)

    (setq projectile-completion-system 'ivy
          projectile-switch-project-action 'projectile-dired
          projectile-require-project-root nil))
#+end_src

** =restclient=

#+begin_src emacs-lisp
  (use-package restclient)
  (use-package company-restclient
    :config
    (add-to-list 'company-backends 'company-restclient))
#+end_src

** =undo-tree=

I like tree-based undo management. I only rarely need it, but when I do, oh boy.

#+begin_src emacs-lisp
  (use-package undo-tree)
#+end_src

* Programming environments

I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.

#+begin_src emacs-lisp
  (setq-default tab-width 2)
#+end_src

Treating terms in CamelCase symbols as separate words makes editing a little
easier for me, so I like to use =subword-mode= everywhere.

#+begin_src emacs-lisp
  (use-package subword
    :config (global-subword-mode 1))
#+end_src

Compilation output goes to the =*compilation*= buffer. I rarely have that window
selected, so the compilation output disappears past the bottom of the window.
This automatically scrolls the compilation window so I can always see the
output.

#+begin_src emacs-lisp
  (setq compilation-scroll-output t)
#+end_src

I use =eglot= as my LSP client.

#+begin_src emacs-lisp
  (use-package eglot)
#+end_src

** Assembler

#+begin_src emacs-lisp
  (use-package nasm-mode)
#+end_src

** Boogie

#+begin_src emacs-lisp
  (use-package boogie-friends)
#+end_src

** CSS, Sass, and Less

Indent by 2 spaces.

#+begin_src emacs-lisp
  (use-package css-mode
    :config
    (setq css-indent-offset 2))
#+end_src

Don't compile the current SCSS file every time I save.

#+begin_src emacs-lisp
  (use-package scss-mode
    :config
    (setq scss-compile-at-save nil))
#+end_src

Install Less.

#+begin_src emacs-lisp
  (use-package less-css-mode)
#+end_src

** Golang

Install =go-mode= and related packages:

#+begin_src emacs-lisp
  (use-package go-mode)
  (use-package go-errcheck)
  (use-package company-go)
#+end_src

Define my =$GOPATH= and tell Emacs where to find the Go binaries.

#+begin_src emacs-lisp
  (setenv "GOPATH" "/home/kurelen/go")
  (kurelen/append-to-path (concat (getenv "GOPATH") "/bin"))
#+end_src

Run =goimports= on every file when saving, which formats the file and
automatically updates the list of imports. This requires that the =goimports=
binary be installed.

#+begin_src emacs-lisp
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
#+end_src

When I open a Go file,

- Start up =company-mode= with the Go backend. This requires that the =gocode=
  binary is installed,
- Redefine the default =compile= command to something Go-specific, and
- Enable =flycheck=.

#+begin_src emacs-lisp
  (add-hook 'go-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends)
                   '(company-go))
              (company-mode)
              (if (not (string-match "go" compile-command))
                  (set (make-local-variable 'compile-command)
                       "go build -v && go test -v && go vet"))
              (flycheck-mode)))
#+end_src

** Haml and Slim

Install the Haml and Slim packages.

#+begin_src emacs-lisp
  (use-package haml-mode)
  (use-package slim-mode)
#+end_src

** Haskell

#+begin_src emacs-lisp
  (use-package haskell-mode)
#+end_src

Enable =haskell-doc-mode=, which displays the type signature of a function, and
use smart indentation.

#+begin_src emacs-lisp
    (add-hook 'haskell-mode-hook
              (lambda ()
                (haskell-doc-mode)
                (turn-on-haskell-indent)
                (interactive-haskell-mode)))
#+end_src

#+begin_src emacs-lisp
  (kurelen/append-to-path "~/.cabal/bin")
#+end_src

** PHP

Trying to setup PHP-Mode from github.com/emacs-php/php-mode

#+begin_src emacs-lisp
    (use-package php-mode)
#+end_src

** JavaScript and CoffeeScript

Install =coffee-mode= from editing CoffeeScript code.

#+begin_src emacs-lisp
  (use-package coffee-mode)
  (use-package js2-mode)
#+end_src

Indent everything by 2 spaces.

#+begin_src emacs-lisp
  (setq js-indent-level 2)

  (add-hook 'coffee-mode-hook
            (lambda ()
              (yas-minor-mode 1)
              (setq coffee-tab-width 2)))

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-hook 'js2-mode-hook #'context-coloring-mode)
#+end_src

** Lisps

*** All Lisps

I like to use =paredit= in Lisp modes to balance parentheses (and more!).

#+begin_src emacs-lisp
  (use-package paredit)
#+end_src

=rainbow-delimiters= is convenient for coloring matching parentheses.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters)
#+end_src

All the lisps have some shared features, so we want to do the same things for
all of them. That includes using =paredit=, =rainbow-delimiters=, and
highlighting the whole expression when point is on a parenthesis.

#+begin_src emacs-lisp
  (setq lispy-mode-hooks
        '(clojure-mode-hook
          emacs-lisp-mode-hook
          lisp-mode-hook
          scheme-mode-hook))

  (dolist (hook lispy-mode-hooks)
    (add-hook hook (lambda ()
                     (setq show-paren-style 'expression)
                     (rainbow-delimiters-mode))))
#+end_src

Setting up cider and clojure-mode

#+begin_src emacs-lisp
  (use-package cider)
  (use-package clojure-mode)
  (use-package clojure-mode-extra-font-locking)

  (add-hook 'clojure-mode-hook 'enable-paredit-mode)

  (add-hook 'clojure-mode-hook 'subword-mode)

  (require 'clojure-mode-extra-font-locking)

  (add-hook 'clojure-mode-hook
          (lambda ()
            (setq inferior-lisp-program "lein repl")
            (font-lock-add-keywords
             nil
             '(("(\\(facts?\\)"
                (1 font-lock-keyword-face))
               ("(\\(background?\\)"
                (1 font-lock-keyword-face))))
            (define-clojure-indent (fact 1))
            (define-clojure-indent (facts 1))
            (rainbow-delimiters-mode)))

  (add-hook 'cider-mode-hook 'eldoc-mode)

  (setq cider-repl-pop-to-buffer-on-connect t)

  (setq cider-show-error-buffer t)
  (setq cider-auto-select-error-buffer t)

  (setq cider-repl-history-file "~/.config/emacs/cider-history")

  (setq cider-repl-wrap-history t)

  (add-hook 'cider-repl-mode-hook 'paredit-mode)

  (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))

  (defun cider-start-http-server ()
    (interactive)
    (cider-load-current-buffer)
    (let ((ns (cider-current-ns)))
      (cider-repl-set-ns ns)
      (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
      (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))

  (defun cider-refresh ()
    (interactive)
    (cider-interactive-eval (format "(user/reset)")))

  (defun cider-user-ns ()
    (interactive)
    (cider-repl-set-ns "user"))

  (eval-after-load 'cider
    '(progn
      (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
      (define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
      (define-key clojure-mode-map (kbd "C-c u") 'cinder-user-ns)
      (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns)))
#+end_src

Elixir Setup

#+begin_src emacs-lisp
  (use-package elixir-mode
  :ensure t
  :init  
  (add-hook 'elixir-mode-hook
            (lambda ()
              (push '(">=" . ?\u2265) prettify-symbols-alist)
              (push '("<=" . ?\u2264) prettify-symbols-alist)
              (push '("!=" . ?\u2260) prettify-symbols-alist)
              (push '("==" . ?\u2A75) prettify-symbols-alist)
              (push '("=~" . ?\u2245) prettify-symbols-alist)
              (push '("<-" . ?\u2190) prettify-symbols-alist)
              (push '("->" . ?\u2192) prettify-symbols-alist)
              (push '("<-" . ?\u2190) prettify-symbols-alist)
              (push '("|>" . ?\u25B7) prettify-symbols-alist))))
  (use-package indium)
  (use-package inf-elixir)
  (use-package web-mode)

  (add-hook 'elixir-mode-hook 'eglot-ensure)
  (add-to-list 'eglot-server-programs
    '(elixir-mode "/home/coding/.bin/elixir-ls/release/erl21/language_server.sh"))

#+end_src

Edit HTML Tags like sexps

#+begin_src emacs-lisp
  (use-package tagedit)
#+end_src


If I'm writing in Emacs lisp I'd like to use =eldoc-mode= to display
documentation.

#+begin_src emacs-lisp
  (use-package eldoc
    :config
    (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
#+end_src

I also like using =flycheck-package= to ensure that my Elisp packages are
correctly formatted.

#+begin_src emacs-lisp
  (use-package flycheck-package)

  (eval-after-load 'flycheck
    '(flycheck-package-setup))
#+end_src

** Python

#+begin_src emacs-lisp
  (use-package python-mode)
#+end_src

Add =~/.local/bin= to load path. That's where =virtualenv= is installed, and
we'll need that for =jedi=.

#+begin_src emacs-lisp
  (kurelen/append-to-path "~/.local/bin")
#+end_src

Enable =elpy=. This provides automatic indentation, auto-completion, syntax
checking, etc.

#+begin_src emacs-lisp
  (use-package elpy)
  (elpy-enable)
#+end_src

Use =flycheck= for syntax checking:

#+begin_src emacs-lisp
  (add-hook 'elpy-mode-hook 'flycheck-mode)
#+end_src

Format code according to PEP8 on save:

#+begin_src emacs-lisp
  (use-package py-autopep8)
  (require 'py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+end_src

Configure Jedi along with the associated =company= mode:

#+begin_src emacs-lisp
  (use-package company-jedi)
  (add-to-list 'company-backends 'company-jedi)

  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)
#+end_src

** Rust

Use =rust-mode= to edit Rust code.

Run =rustfmt= automatically when saving a file.

#+begin_src emacs-lisp
  (use-package rust-mode
    :config
    (kurelen/append-to-path "~/.cargo/bin")
    (setq rust-format-on-save t))
#+end_src

** =sh=

Indent with 2 spaces.

#+begin_src emacs-lisp
  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))
#+end_src

** YAML

Ensure that we always use =fixed-pitch= fonts for YAML.

#+begin_src emacs-lisp
  (use-package yaml-mode
    :config
    (add-hook 'yaml-mode-hook (lambda () (variable-pitch-mode 0))))
#+end_src

* Terminal

I use =multi-term= to manage my shell sessions. It's bound to =C-c t=.

#+begin_src emacs-lisp
  (use-package multi-term)
  (global-set-key (kbd "C-c t") 'multi-term)
#+end_src

Use a login =bash= shell:

#+begin_src emacs-lisp
  (setq multi-term-program-switches "--login")
#+end_src

I'd rather not use Evil in the terminal. It's not especially useful (I don't use
vi bindings in xterm) and it shadows useful keybindings (=C-d= for EOF, for
example).

#+begin_src emacs-lisp
  (evil-set-initial-state 'term-mode 'emacs)
#+end_src

I add a bunch of hooks to =term-mode=:

- I'd like links (URLs, etc) to be clickable.
- Yanking in =term-mode= doesn't quite work. The text from the paste appears in
  the buffer but isn't sent to the shell process. This correctly binds =C-y= and
  middle-click to yank the way we'd expect.
- I bind =M-o= to quickly change windows. I'd like that in terminals, too.
- I don't want to perform =yasnippet= expansion when tab-completing.

#+begin_src emacs-lisp
  (defun kurelen/term-paste (&optional string)
    (interactive)
    (process-send-string
     (get-buffer-process (current-buffer))
     (if string string (current-kill 0))))

  (add-hook 'term-mode-hook
            (lambda ()
              (goto-address-mode)
              (define-key term-raw-map (kbd "C-y") 'kurelen/term-paste)
              (define-key term-raw-map (kbd "<mouse-2>") 'kurelen/term-paste)
              (define-key term-raw-map (kbd "M-o") 'other-window)
              (setq yas-dont-activate t)))
#+end_src

* Publishing and task management with Org-mode

Including =org-tempo= restores the =<s=-style easy-templates that were
deprecated in Org 9.2.

I'd like the initial scratch buffer to be in Org:

#+begin_src emacs-lisp
  (setq initial-major-mode 'org-mode)
#+end_src

** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+begin_src emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+end_src

This hides the slashes and stars that denote /emphasis/ and *bold* text.

#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

Use syntax highlighting in source blocks while editing.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

Make TAB act as if it were issued in a buffer of the language's major mode.

#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

Quickly insert a block of elisp:

#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+end_src

Don't indent newly expanded blocks, even if they're under a heading.

#+begin_src emacs-lisp
  (setq org-adapt-indentation nil)
#+end_src

** Task management and agenda views

Store my org files in =~/documents/org=, maintain an inbox in Dropbox, define
the location of an index file (my main todo list), and archive finished tasks in
=~/documents/org/archive.org=.

#+begin_src emacs-lisp
  (setq org-directory "~/documents/org")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-index-file (org-file-path "index.org"))
  (setq org-archive-location
        (concat
         (org-file-path (format "archive/archive-%s.org" (format-time-string "%Y")))
         "::* From %s"))

  (setq org-refile-targets `((,org-index-file :level . 1)
                             (,(org-file-path "deliveries.org") :level . 1)
                             (,(org-file-path "environment.org") :level . 1)
                             (,(org-file-path "links.org") :level . 1)
                             (,(org-file-path "media.org") :level . 1)
                             (,(org-file-path "someday-maybe.org") :level . 1)
                             (,(org-file-path "work.org") :level . 1)))
#+end_src

I store most of my personal tasks in my index and maintain a separate file for
work-related tasks, so I'd like to derive my agenda from those files. I've also
got some annual OKRs in =goals.org=.

I also keep a schedule in =events.org=. Plus some recurring events in,
reasonably, a =recurring-events.org= file. Those are (mostly) structured as
=org-habit= items so they can recur according to a schedule.

#+begin_src emacs-lisp
  (setq org-agenda-files (list org-index-file
                               (org-file-path "calendars")
                               (org-file-path "deliveries.org")
                               (org-file-path "events.org")
                               (org-file-path "habits.org")
                               (org-file-path "news.org")
                               (org-file-path "recurring-events.org")
                               (org-file-path "work.org")))
#+end_src

Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
place in the archive.

#+begin_src emacs-lisp
  (defun kurelen/mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'kurelen/mark-done-and-archive)
#+end_src

Record the time that a todo was archived.

#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src

Ensure that a task can't be marked as done if it contains unfinished subtasks or
checklist items. This is handy for organizing "blocking" tasks hierarchically.

#+begin_src emacs-lisp
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
#+end_src

Begin weeks /today/, not on the last Monday.

#+begin_src emacs-lisp
  (setq org-agenda-start-on-weekday nil)
#+end_src

Show the next two weeks in the agenda (instead of only one).

#+begin_src emacs-lisp
  (setq org-agenda-span 14)
#+end_src

Don't show deadline warnings under today's entry. If something's due in two
days, I'll see it in my agenda as a deadline on that day; I don't /also/ need it
listed under today's tasks, prefixed with =In 2 d:=.

#+begin_src emacs-lisp
  (setq org-deadline-warning-days 0)
#+end_src

Hide the category prefix from tasks. In practice, I've usually only got one or
two files of tasks, so prefixing tasks with the file they're stored in is mostly
redundant.

#+begin_src emacs-lisp
  (setq org-agenda-prefix-format '((agenda . " %i %?-12t% s")
                                   (todo . " %i ")
                                   (tags . " %i ")
                                   (search . " %i ")))
#+end_src

I use =org-habit= to schedule recurring events and reminders for myself.

#+begin_src emacs-lisp
  (require 'org-habit)
#+end_src

Don't show the =org-habit= consistency graph. I don't actually find it
motivating, personally, and it kinda visually fills up my agenda. There's no
provided way to disable the graph, as far as I can tell, so I've just redefined
the function to do nothing.

#+begin_src emacs-lisp
  (defun org-habit-build-graph (habit starting current ending)
    "                             ")
  (setq org-habit-graph-column 60)
#+end_src

The "Personal agenda" view is simple! I just include my agenda for the next two
weeks, including any recurring habits or scheduled events.

I have a number of standing weekly video calls with friends and family, and I
like keeping track of what happened in the last week to share on those calls.
Because my memories only exist in text files =), I have a custom view to list
news items from the last week.

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("p" "Personal agenda"
           ((agenda ""))
           ((org-agenda-tag-filter-preset '("-news"))
            (org-agenda-overriding-header "Personal agenda")))
          ("n" "News from this week"
           ((tags "+news&SCHEDULED<=\"<today>\"&SCHEDULED>=\"<-7d>\""))
           ((org-agenda-overriding-header "News from this week")))))
#+end_src

I consult my agenda pretty often, so I bind =C-c d= to open it a bit faster. This
also copies any files I've sent through Drafts into my index file before
displaying the index, so they'll be in the agenda view, too.

#+begin_src emacs-lisp
  (defun kurelen/dashboard ()
    (interactive)
    (call-process-shell-command "daily-checklist")
    (delete-other-windows)
    (find-file org-index-file)
    (org-agenda nil "p"))

  (global-set-key (kbd "C-c d") 'kurelen/dashboard)
#+end_src

Shorten the default (lengthy) =org-agenda= modeline.

#+begin_src emacs-lisp
  (defun org-agenda-set-mode-name ()
    (setq mode-name '("Org-agenda")))
#+end_src

*** Capturing tasks

Define a few common tasks as capture templates. Specifically, I frequently:

- Record ideas for future blog posts in =~/documents/notes/blog-ideas.org=,
- Maintain a todo list in =~/documents/org/index.org=.
- Convert emails into todos to maintain an empty inbox.

#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("b" "Blog idea"
           entry
           (file "~/documents/notes/blog-ideas.org")
           "* %?\n")

          ("c" "Contact"
           entry
           (file "~/documents/contacts.org")
           "* %(org-contacts-template-name)
  :PROPERTIES:
  :ADDRESS: %^{123 Fake St., City, ST 12345}
  :PHONE: %^{555-555-5555}
  :EMAIL: %(org-contacts-template-email)
  :NOTE: %^{note}
  :END:")

          ("d" "Delivery"
           entry
           (file+headline "~/documents/org/deliveries.org" "Deliveries")
           "** %?\n   SCHEDULED: %t\n")

          ("e" "Email"
           entry
           (file+headline org-index-file "Inbox")
           "* TODO %?\n%a\n")

          ("f" "Finished book"
           table-line
           (file "~/documents/notes/books-read.org")
           "| %^{Title} | %^{Author} | %u |")

          ("j" "Work task"
           entry
           (file+headline "~/documents/org/work.org" "Tasks")
           "* TODO %?\n")

          ("k" "Kookaburra ingest"
           entry
           (file+headline "~/documents/org/kookaburra-ingest.org" "Queue")
           "* TODO %?\n")
  
          ("m" "Media queue"
           item
           (file+headline "~/documents/org/media.org" "Inbox")
           "- %?\n")

          ("n" "News item"
           entry
           (file "~/documents/org/news.org")
           "* %?\n   SCHEDULED: %t\n")

          ("s" "Subscribe to an RSS feed"
           plain
           (file "~/documents/rss-feeds.org")
           "*** [[%^{Feed URL}][%^{Feed name}]]")

          ("t" "Todo"
           entry
           (file+headline org-index-file "Inbox")
           "* TODO %?\n")))
#+end_src

When I'm starting an Org capture template I'd like to begin in insert mode. I'm
opening it up in order to start typing something, so this skips a step.

#+begin_src emacs-lisp
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+end_src

Refiling according to the document's hierarchy.

#+begin_src emacs-lisp
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
#+end_src

*** Keybindings

Bind a few handy keys.

#+begin_src emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+end_src

Hit =C-c i= to quickly open up my todo list.

#+begin_src emacs-lisp
  (defun kurelen/open-index-file ()
    "Open the master org TODO list."
    (interactive)
    (find-file org-index-file)
    (flycheck-mode -1)
    (end-of-buffer))

  (global-set-key (kbd "C-c i") 'kurelen/open-index-file)
#+end_src

Hit =M-n= to quickly open up a capture template for a new todo.

#+begin_src emacs-lisp
  (defun org-capture-todo ()
    (interactive)
    (org-capture :keys "t"))

  (global-set-key (kbd "M-n") 'org-capture-todo)
  (add-hook 'gfm-mode-hook
            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
  (add-hook 'haskell-mode-hook
            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
#+end_src

Hit =C-c w= to quickly open up my work todo list.

#+begin_src emacs-lisp
  (defun kurelen/open-work-file ()
    "Open the work TODO list."
    (interactive)
    (find-file (org-file-path "work.org"))
    (flycheck-mode -1)
    (end-of-buffer))

  (global-set-key (kbd "C-c w") 'kurelen/open-work-file)
#+end_src

Rebind =C-c C-l= to [[https://xenodium.com/emacs-dwim-do-what-i-mean/][DWIM]]:

#+begin_src emacs-lisp
  (defun kurelen/org-insert-link-dwim ()
    "Like `org-insert-link' but with personal dwim preferences."
    (interactive)
    (let* ((point-in-link (org-in-regexp org-link-any-re 1))
           (clipboard-url (when (string-match-p "^http" (current-kill 0))
                            (current-kill 0)))
           (region-content (when (region-active-p)
                             (buffer-substring-no-properties (region-beginning)
                                                             (region-end)))))
      (cond ((and region-content clipboard-url (not point-in-link))
             (delete-region (region-beginning) (region-end))
             (insert (org-make-link-string clipboard-url region-content))
             (message clipboard-url))
            ((and clipboard-url (not point-in-link))
             (insert (org-make-link-string
                      clipboard-url
                      (read-string "title: "
                                   (with-current-buffer (url-retrieve-synchronously clipboard-url)
                                     (dom-text (car
                                                (dom-by-tag (libxml-parse-html-region
                                                             (point-min)
                                                             (point-max))
                                                            'title))))))))
            (t
             (call-interactively 'org-insert-link)))))

  (define-key org-mode-map (kbd "C-c C-l") 'kurelen/org-insert-link-dwim)
#+end_src

** Exporting

Allow export to markdown and beamer (for presentations).

#+begin_src emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+end_src

Allow =babel= to evaluate Emacs lisp, Ruby, =ditaa=, Graphviz, or Gnuplot code.

#+begin_src emacs-lisp
  (use-package gnuplot)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (ditaa . t)
     (dot . t)
     (gnuplot . t)))
#+end_src

Don't ask before evaluating code blocks.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

Use =htmlize= to ensure that exported code blocks use syntax highlighting.

#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

Associate the "dot" language with the =graphviz-dot= major mode.

#+begin_src emacs-lisp
  (use-package graphviz-dot-mode)
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+end_src

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+begin_src emacs-lisp
  (setq org-export-with-smart-quotes t)
#+end_src

**** Exporting to HTML

Don't include a footer with my contact and publishing information at the bottom
of every exported HTML document.

#+begin_src emacs-lisp
  (setq org-html-postamble nil)
#+end_src

**** Exporting to PDF

I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.

#+begin_src emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

Include the =minted= package in all of my LaTeX exports.

#+begin_src emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+end_src

** TeX configuration

I rarely write LaTeX directly any more, but I often export through it with
org-mode, so I'm keeping them together.

Automatically parse the file after loading it.

#+begin_src emacs-lisp
  (setq TeX-parse-self t)
#+end_src

Always use =pdflatex= when compiling LaTeX documents. I don't really have any
use for DVIs.

#+begin_src emacs-lisp
  (setq TeX-PDF-mode t)
#+end_src

Enable a minor mode for dealing with math (it adds a few useful keybindings),
and always treat the current file as the "main" file. That's intentional, since
I'm usually actually in an org document.

#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-math-mode)
              (setq TeX-master t)))
#+end_src

* Browsing the Web

I use Firefox to browse the Web, but I'd like to open [[https://gemini.circumlunar.space/][Gemini]] links in =elpher=.
This checks the prefix of each URL and uses the appropriate program to open it.

#+begin_src emacs-lisp
  (use-package elpher)

  (setq kurelen/gemini-browser 'elpher-go)

  (defun kurelen/browse-url (url &rest args)
    (if (s-prefix? "gemini:" url)
        (funcall kurelen/gemini-browser url)
      (browse-url-default-browser url args)))

  (setq browse-url-browser-function 'kurelen/browse-url)
#+end_src

Exporting Org files to HTML and opening the result triggers
=/usr/bin/sensible-browser=, which checks the =$BROWSER= environment variable to
choose the right browser. I'd like to always use Firefox for that, so:

#+begin_src emacs-lisp
  (setenv "BROWSER" "chrome")
#+end_src

* Writing prose

I write prose in several modes: I might be editing an Org document, or a commit
message, or an email. These are the main ones, with sub-items being /derived/ from
their parents:

- =git-commit-mode=
- =text-mode=
  - =markdown-mode=
    - =gfm-mode=
  - =org-mode=

Recall that derived modes "inherit" their parent's hooks, so a hook added onto
e.g. =text-mode= will also be executed by

There are some exceptions, but I can usually associate a hook with every
prose-related mode, so I store those in a list:

#+begin_src emacs-lisp
  (defvar prose-modes
    '(gfm-mode
      git-commit-mode
      markdown-mode
      message-mode
      org-mode
      text-mode))

  (defvar prose-mode-hooks
    (mapcar (lambda (mode) (intern (format "%s-hook" mode)))
            prose-modes))
#+end_src

** Use =variable-pitch= fonts when writing prose

I've been writing prose in a monospace font for at least fifteen years now. And,
y'know what? It's just not sparking joy.

I've recently started using a variable-pitch font for prose, and it's quite
nice! This ensures that that happens everywhere it's appropriate.

Yes, that even includes git commit messages! They're as much prose as a README
is, right?

#+begin_src emacs-lisp
  (defun kurelen/enable-variable-pitch-mode ()
    (variable-pitch-mode 1))

  (dolist (hook prose-mode-hooks)
    (add-hook hook 'kurelen/enable-variable-pitch-mode))

  (add-hook 'elpher-mode-hook 'kurelen/enable-variable-pitch-mode)
#+end_src

That said, code, links, and tables in Org should still be monospaced. They look
kinda goofy otherwise, I think.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
              (set-face-attribute 'org-table nil :inherit 'fixed-pitch)))
#+end_src

The same is true for =crontab= files (which derive from =text-mode=, apparently!):

#+begin_src emacs-lisp
  (add-hook 'crontab-mode-hook
            (lambda () (variable-pitch-mode 0)))
#+end_src

** Enable spell-checking in the usual places

I want to make sure that I've enabled spell-checking if I'm editing text,
composing an email, or authoring a Git commit.

#+begin_src emacs-lisp
  (use-package flyspell
    :config
    (dolist (hook prose-mode-hooks)
      (add-hook hook 'flyspell-mode)))
#+end_src

** Wrap paragraphs automatically

=AutoFillMode= automatically wraps paragraphs, kinda like hitting =M-q=. I wrap a
lot of paragraphs, so this automatically wraps 'em when I'm writing text,
Markdown, or Org.

#+begin_src emacs-lisp
  (dolist (hook prose-mode-hooks)
    (add-hook hook 'turn-on-auto-fill))
#+end_src

** Use Org-style lists and tables everywhere

Enable Org-style tables.

#+begin_src emacs-lisp
  (add-hook 'git-commit-mode-hook 'orgtbl-mode)
  (add-hook 'markdown-mode-hook 'orgtbl-mode)
  (add-hook 'message-mode-hook 'orgtbl-mode)
#+end_src

Use the [[https://elpa.gnu.org/packages/orgalist.html][=orgalist=]] package for more convenient list manipulation.

#+begin_src emacs-lisp
  (use-package orgalist
    :config
    (add-hook 'git-commit-mode-hook 'orgalist-mode)
    (add-hook 'markdown-mode-hook 'orgalist-mode)
    (add-hook 'message-mode-hook 'orgalist-mode))
#+end_src

** Linting prose

I use [[http://proselint.com/][proselint]] to check my prose for common errors. This creates a flycheck
checker that runs proselint in texty buffers and displays my errors.

#+begin_src emacs-lisp
  (require 'flycheck)

  (flycheck-def-executable-var proselint "proselint")
  (flycheck-define-command-checker 'proselint
    "A linter for prose."
    :command '("proselint" source-inplace)
    :error-patterns
    '((warning line-start (file-name) ":" line ":" column ": "
               (id (one-or-more (not (any " "))))
               (message (one-or-more not-newline)
                        (zero-or-more "\n" (any " ") (one-or-more not-newline)))
               line-end))
    :modes prose-modes
    :next-checkers 'nil
    :standard-input 'nil
    :working-directory 'nil)

  (add-to-list 'flycheck-checkers 'proselint)
#+end_src

Use flycheck in the appropriate buffers:

#+begin_src emacs-lisp
  (dolist (hook prose-mode-hooks)
    (add-hook hook 'flycheck-mode))
#+end_src

** Look up definitions in Webster 1913

I look up definitions by hitting =C-x w=, which shells out to =sdcv=. I've
loaded that with the (beautifully lyrical) 1913 edition of Webster's dictionary,
so these definitions are a lot of fun.

#+begin_src emacs-lisp
  (defun kurelen/dictionary-prompt ()
    (read-string
     (format "Word (%s): " (or (kurelen/region-or-word) ""))
     nil
     nil
     (kurelen/region-or-word)))

  (defun kurelen/dictionary-define-word ()
    (interactive)
    (let* ((word (kurelen/dictionary-prompt))
           (buffer-name (concat "Definition: " word)))
      (with-output-to-temp-buffer buffer-name
        (shell-command (format "sdcv -n %s" word) buffer-name))
      (with-current-buffer buffer-name
        (variable-pitch-mode 1))))

  (define-key global-map (kbd "C-x w") 'kurelen/dictionary-define-word)
#+end_src

** Look up words in a thesaurus

Hitting =C-x s= searches for synonyms for the word at point.

#+begin_src emacs-lisp
  (use-package powerthesaurus
    :bind
    ("C-x s" . powerthesaurus-lookup-word-dwim))
#+end_src

** Editing with Markdown

Because I can't always use =org=.

- Associate =.md= files with GitHub-flavored Markdown.
- Use =pandoc= to render the results.
- Apply syntax highlighting in code blocks.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands gfm-mode
    :mode (("\\.md$" . gfm-mode))
    :config
    (custom-set-faces
     '(markdown-pre-face ((t nil))))

  (setq markdown-command "pandoc --standalone --mathjax --from=markdown"
        markdown-fontify-code-blocks-natively t))
#+end_src

** Cycle between spacing alternatives

Successive calls to =cycle-spacing= rotate between changing the whitespace
around point to:

- A single space,
- No spaces, or
- The original spacing.

Binding this to =M-SPC= is strictly better than the original binding of
=just-one-space=.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-SPC") 'cycle-spacing)
#+end_src

** Enable region case modification

#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src

** Quickly explore my "notes" directory with =deft=

#+begin_src emacs-lisp
  (use-package deft
    :bind ("C-c n" . deft)
    :commands (deft)
    :config

    (setq deft-directory "~/documents/notes"
          deft-recursive t
          deft-use-filename-as-title t)

    (evil-set-initial-state 'deft-mode 'emacs))
#+end_src

* File management with =dired=

Hide dotfiles by default, but toggle their visibility with =.=.

#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles
    :config
    (dired-hide-dotfiles-mode)
    (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))
#+end_src

Open media with the appropriate programs.

#+begin_src emacs-lisp
  (use-package dired-open
    :config
    (setq dired-open-extensions
          '(("avi" . "mpv")
            ("cbr" . "comix")
            ("doc" . "abiword")
            ("docx" . "abiword")
            ("gif" . "ffplay")
            ("gnumeric" . "gnumeric")
            ("jpeg" . "s")
            ("jpg" . "s")
            ("mkv" . "mpv")
            ("mov" . "mpv")
            ("mp3" . "mpv")
            ("mp4" . "mpv")
            ("pdf" . "zathura")
            ("png" . "s")
            ("webm" . "mpv")
            ("xls" . "gnumeric")
            ("xlsx" . "gnumeric"))))
#+end_src

These are the switches that get passed to =ls= when =dired= gets a list of
files. We're using:

- =l=: Use the long listing format.
- =h=: Use human-readable sizes.
- =v=: Sort numbers naturally.
- =A=: Almost all. Doesn't include "=.=" or "=..=".

That said, I'd usually like to hide those extra details.
=dired-hide-details-mode= can be toggled with =(=.

#+begin_src emacs-lisp
  (setq-default dired-listing-switches "-lhvA")
  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
#+end_src

Set up DWIM ("do what I mean") for =dired=. When I've got two =dired= windows
side-by-side, and I move or copy files in one window, this sets the default
location to the other window.

#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src

Kill buffers of files/directories that are deleted in =dired=.

#+begin_src emacs-lisp
  (setq dired-clean-up-buffers-too t)
#+end_src

Always copy directories recursively instead of asking every time.

#+begin_src emacs-lisp
  (setq dired-recursive-copies 'always)
#+end_src

Ask before recursively /deleting/ a directory, though.

#+begin_src emacs-lisp
  (setq dired-recursive-deletes 'top)
#+end_src

Files are normally moved and copied synchronously. This is fine for small or
local files, but copying a large file or moving a file across a mounted network
drive blocks Emacs until the process is completed. Unacceptable!

This uses =emacs-async= to make =dired= perform actions asynchronously.

#+begin_src emacs-lisp
  (use-package async
    :config
    (dired-async-mode 1))
#+end_src

Use "j" and "k" to move around in =dired=.

#+begin_src emacs-lisp
  (evil-define-key 'normal dired-mode-map (kbd "j") 'dired-next-line)
  (evil-define-key 'normal dired-mode-map (kbd "k") 'dired-previous-line)
#+end_src

I'm often browsing directories of photos and images, so this binds "v" to view a
slideshow of the current directory with =s= (a custom =feh= wrapper defined
elsewhere in this repo).

#+begin_src emacs-lisp
  (defun kurelen/dired-slideshow ()
    (interactive)
    (start-process "dired-slideshow" nil "s" (dired-current-directory)))

  (evil-define-key 'normal dired-mode-map (kbd "v") 'kurelen/dired-slideshow)
#+end_src

* Editing settings

** Quickly visit Emacs configuration

I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.

#+begin_src emacs-lisp
  (defun kurelen/visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

  (global-set-key (kbd "C-c e") 'kurelen/visit-emacs-config)
#+end_src

** Always kill current buffer

Assume that I always want to kill the current buffer when hitting =C-x k=.

#+begin_src emacs-lisp
  (defun kurelen/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'kurelen/kill-current-buffer)
#+end_src

** Set up =helpful=

The =helpful= package provides, among other things, more context in Help
buffers.

#+begin_src emacs-lisp
  (use-package helpful)

  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (evil-define-key 'normal helpful-mode-map (kbd "q") 'quit-window)
#+end_src

** Look for executables in =/usr/local/bin=

#+begin_src emacs-lisp
  (kurelen/append-to-path "/usr/local/bin")
#+end_src

** Save my location within a file

Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.

#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src

** Always indent with spaces

Never use tabs. Tabs are the devilâ€™s whitespace.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Install and configure =which-key=

=which-key= displays the possible completions for a long keybinding. That's
really helpful for some modes (like =projectile=, for example).

#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src

** Configure =yasnippet=

#+begin_src emacs-lisp
  (use-package yasnippet)
#+end_src

I keep my snippets in =~/.emacs/snippets/text-mode=, and I always want =yasnippet=
enabled.

#+begin_src emacs-lisp
  (setq yas-snippet-dirs '("~/.config/emacs/snippets/text-mode"))
  (yas-global-mode 1)
#+end_src

I /donâ€™t/ want =yas= to automatically indent the snippets it inserts. Sometimes
this looks pretty bad (when indenting org-mode, for example, or trying to guess
at the correct indentation for Python).

#+begin_src emacs-lisp
  (setq yas-indent-line 'auto)
#+end_src

** Configure =ivy= and =counsel=

I use =ivy= and =counsel= as my completion framework.

This configuration:

- Uses =counsel-M-x= for command completion,
- Replaces =isearch= with =swiper=,
- Uses =smex= to maintain history,
- Enables fuzzy matching everywhere except swiper (where it's thoroughly
  unhelpful), and
- Includes recent files in the switch buffer.

#+begin_src emacs-lisp
  (use-package counsel
    :bind
    ("M-x" . 'counsel-M-x)
    ("C-s" . 'swiper)

    :config
    (use-package flx)
    (use-package smex)

    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
          '((swiper . ivy--regex-plus)
            (t . ivy--regex-fuzzy))))
#+end_src

** Switch and rebalance windows when splitting

When splitting a window, I invariably want to switch to the new window. This
makes that automatic.

#+begin_src emacs-lisp
  (defun kurelen/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun kurelen/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'kurelen/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'kurelen/split-window-right-and-switch)
#+end_src

** Mass editing of =grep= results

I like the idea of mass editing =grep= results the same way I can edit filenames
in =dired=. These keybindings allow me to use =C-x C-q= to start editing =grep=
results and =C-c C-c= to stop, just like in =dired=.

#+begin_src emacs-lisp
  (use-package wgrep)

  (eval-after-load 'grep
    '(define-key grep-mode-map
      (kbd "C-x C-q") 'wgrep-change-to-wgrep-mode))

  (eval-after-load 'wgrep
    '(define-key grep-mode-map
      (kbd "C-c C-c") 'wgrep-finish-edit))

  (setq wgrep-auto-save-buffer t)
#+end_src

** Use projectile everywhere

#+begin_src emacs-lisp
  (projectile-global-mode)
#+end_src

** Add a bunch of engines for =engine-mode=

Enable [[https://github.com/kurelen/engine-mode][engine-mode]] and define a few useful engines.

#+begin_src emacs-lisp
  (use-package engine-mode)
  (require 'engine-mode)

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (defengine youtube
    "https://www.youtube.com/results?search_query=%s")

  (engine-mode t)
#+end_src

* Set custom keybindings

Just a few handy functions.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "M-o") 'other-window)
#+end_src
